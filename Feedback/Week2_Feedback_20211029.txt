Starting code feedback for Chalita, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.64 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, Week1, Feedback, Week2

Found the following files in parent directory: README.md, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
#The files with following extension will not be push into the git repository

*~ 
*.tmp

#MAC weird system file
.DS_Store

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# My CMEE Coursework Repository 2021-2022

This repository contains the coursework for my MSc CMEE at Imperial College London.

## Author

[Chalita Chomkatekaew](https://orcid.org/0000-0003-2543-1045/) 

## Week 1

Introduction to the UNIX and Linux, shell scripting and LaTeX. Code folder contains the shell utility scripts, where the data contains the example data files.

## Week2

Introduction to the basic Python syntax and data structure. How to write and run Python script, together with the control flow tools and debugging the Python script.
 




**********************************************************************

======================================================================
Looking for the weekly directories...

Found 2 weekly directories: Week1, Week2

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: code, sandbox, results, data

Found the following files: README.md, .gitignore

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Week2 CMEE Coursework 

CMEE Bootcamp Week 2 (10 Oct 2021 - 16 Oct 2021)
The topics covered in this week including:

- Basics of Python syntax and data structures
- How to write and run python code using ipython
- Understand and implement Python control flow tools
- Writing, debugging, using, and testing Python functions

All the scripts used Mac OS Big Sur version 11.6. A comprehensive list of all files and scripts within the Week 2 directory is provided below.

## Code

- MyExampleScript.py
- align_seqs.py - Script for aligning the sequence with the input Myexampleseq.csv
- basic_csv.py - Script on how to handling the csv file in Python
- basic_io1.py - Script on how to import the data from input as a simple text file
- basic_io2.py - Script on how to create and write an outout file
- basic_io3.py - Script on how to store and load the data from pickle file
- boilerplate.py
- cfexercises1.py - The module examples in arithmetic operators
- cfexercises2.py - The examples on FOR and WHILE loops in Python
- control_flow.py - Script on how control flow tools work
- debugme.py - Script on the process of debugging code in python
- dictionary.py - An exercise on how to swap key and value from the dictionary data type
- lc1.py - An exercise on list comprehension with list data type
- lc2.py - An exercise on list comprehension with conditional arguments
- loops.py - The examples on how FOR and WHILE loops work in Python
- MyExampleScript.py - Script on how to write a Python script and function
- oaks.py - The examples on list comprehension in comparison with convensional loops
- sysargv.py - Script on how 'sys' works
- test_control_flow.py - Script on the use of control statement
- tuple.py - An exercise on printing the input as output blocks
- using_name.py - Script on howls 'main' and 'name' work

## Data

- Exampleseq.csv - input for align_seq.py
- bodymass.csv - output from basic_csv.py
- testcsv.csv - input for basic_csv.py
## Results

An empty directory for the output files

## Sandbox

- test.txt - A test data for basic_io1.py
- testout.txt - The output data from basic_io2.py
- testp.p - A pickle file for basic_io3.py

 

**********************************************************************

Found following files in results directory: best_align_seq_result.txt...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 99.5

Found 20 code files: debugme.py, lc2.py, control_flow.py, loops.py, basic_io3.py, cfexercises1.py, oaks.py, align_seqs.py, using_name.py, dictionary.py, test_control_flow.py, sysargv.py, tuple.py, cfexercises2.py, basic_io1.py, basic_io2.py, boilerplate.py, MyExampleScript.py, lc1.py, basic_csv.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script illustrates the process of debugging code in python"""

__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk)'
__version__ = '0.0.1'

def buggyfunc(x):
    y = x
    for i in range(x):
        try:
            y = y - 1
            z = x / y
        except ZeroDivisionError:
            print(f"The result of dividing a number by zero is undefined")
        except:
            print(f"This didn't work; x = {x}; y = {y}")
        else:
            print(f"OK; x = {x}, y = {y}, z = {z};")
    return z

buggyfunc(20)

**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
OK; x = 20, y = 19, z = 1.0526315789473684;
OK; x = 20, y = 18, z = 1.1111111111111112;
OK; x = 20, y = 17, z = 1.1764705882352942;
OK; x = 20, y = 16, z = 1.25;
OK; x = 20, y = 15, z = 1.3333333333333333;
OK; x = 20, y = 14, z = 1.4285714285714286;
OK; x = 20, y = 13, z = 1.5384615384615385;
OK; x = 20, y = 12, z = 1.6666666666666667;
OK; x = 20, y = 11, z = 1.8181818181818181;
OK; x = 20, y = 10, z = 2.0;
OK; x = 20, y = 9, z = 2.2222222222222223;
OK; x = 20, y = 8, z = 2.5;
OK; x = 20, y = 7, 
**********************************************************************

Code ran without errors

Time consumed = 0.07981s

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script is a second exercise using list comprehension of rainfall variable 
to create two lists in combination with if conditions"""

__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk'
__version__ = '0.0.1'

## Constants ##

# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
 
# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 

# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.


## First exercise

# list comprehension of the months and amount of rain 
# where the amount of rain was greater than 100 mm.

rain_more_100 = [more for more in rainfall if more[1] > 100]
print(rain_more_100)

## Second exercise

# list comprehension of months where the amonth of rain was less than 50 mm.

rain_less_50_month = [less[0] for less in rainfall if less[1] < 50]
print(rain_less_50_month)


## Third exercise

# Convensional loops of the first two exercises.

rain_more_100 = [] #Creat an empty list to store the output
for more in rainfall:
    if more[1] > 100: #True if the amount of rain > 100
        rain_more_100.append(more)
print(rain_more_100)

rain_less_50_month = [] #Creat an empty list to store the output
for less in rainfall:
    if less[1] < 50: 
        rain_less_50_month.append(less[0]) #only append the first index, which is the month.
print(rain_less_50_month)

**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']

**********************************************************************

Code ran without errors

Time consumed = 0.08241s

======================================================================
Inspecting script file control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped) . Hence, you can access your docstrings at run time.

__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk)'
__version__ = '0.0.1'

##imports##
import sys # module to interface our program with the operating system

## constants ##


## functions ##
def even_or_odd(x=0): #if not specificed, x should take value 0.

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return "%d is Even!" % x
    return "%d is Odd!" % x

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: #When all other (if, elif) conditions are not met
        return "No divisor found for %d" % x # Each function can return a value or a variable.
    return "The largest divisor of %d is %d" % (x, largest)

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): # "range" returns a sequence of integers
        if x % i == 0:
            print("%d is not a prime: %d is a divisor" % (x, i))
            return False
    print("%d is a prime!" % x)
    return True

def find_all_primes(x = 22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
        if is_prime(i):
            allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes), x))
    return allprimes
    
def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if __name__ == "__main__":
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is n
**********************************************************************

Code ran without errors

Time consumed = 0.07721s

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
# FOR loops in Python
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loops in Python
z = 0
while z < 100:
    z = z + 1
    print(z) ##print a number from 1..100

b = True
while b:
    print("GERONIMO! infinite loop! ctrl+c to stop!")



**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 96.5

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c
**********************************************************************

Code ran without errors

Time consumed = 11.77043s

======================================================================
Inspecting script file basic_io3.py...

File contents are:

**********************************************************************

#!/usr/bin/env python3

"""This script is showing how to store and load a data into a pickle file"""

__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk)'
__version__ = '0.0.1'

#######################
# STORING OBJECTS
#######################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}


import pickle

f = open('../sandbox/testp.p', 'wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f) ##save a dictionary into a pickle file AKA f
f.close()

## Load the data again
f = open('../sandbox/testp.p', 'rb') 
another_dictionary = pickle.load(f) ##load a dictionary from a pickle file stored in f
f.close()

print(another_dictionary)

**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 96.5

Output (only first 500 characters): 


**********************************************************************
{'a key': 10, 'another key': 11}

**********************************************************************

Code ran without errors

Time consumed = 0.13593s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""These functions are for the examples of arithmetic operators in python"""
__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk)'
__version__ = '0.0.1'

import sys

## return the value of x in a power of 0.5
def foo_1(x):
    return x ** 0.5 

## if x is more than y, return x otherwise return y
def foo_2(x, y):
    if x > y:
        return x
    return y 

## rearrange the input numbers with the x > y < z when meet the condition
def foo_3(x, y, z):
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z] 

## factorial calculation of x AKA x!
def foo_4(x):
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result 

## a recursive function that calculates the factorial of x AKA x*(x-1)!
def foo_5(x): 
    if x == 1:
        return 1
    return x * foo_5(x - 1)

## Calculate the factorial of x in a different way
def foo_6(x): 
    facto = 1
    while x >= 1:
        facto = facto * 1
        x = x - 1
    return facto

def main(argv):
    print(foo_1(5))
    print(foo_2(5, 2))
    print(foo_3(10, 5, 2))
    print(foo_4(5))
    print(foo_5(5))
    print(foo_6(5))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 93.0

Output (only first 500 characters): 


**********************************************************************
2.23606797749979
5
[5, 2, 10]
120
120
1

**********************************************************************

Code ran without errors

Time consumed = 0.08170s

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script is an example of how to use list comprehension to create a list in comparison to
the convensional loop"""

__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk)'
__version__ = '0.0.1'

## Finds just those taxa that are oak trees from a list of species

taxa = [  'Quercus robur',
          'Franxinus excelsior' ,
          'Pinus sylvestris' ,
          'Quercus cerris' ,
          'Quercus petraea',
          ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

## Using for loops

oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

## Using list comprehensions
oaks_lc = set([species for species in taxa if is_an_oak(species)])

## Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

## Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)

**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 92.5

Output (only first 500 characters): 


**********************************************************************
{'Quercus petraea', 'Quercus robur', 'Quercus cerris'}
{'QUERCUS CERRIS', 'QUERCUS ROBUR', 'QUERCUS PETRAEA'}
{'QUERCUS CERRIS', 'QUERCUS ROBUR', 'QUERCUS PETRAEA'}

**********************************************************************

Code ran without errors

Time consumed = 0.07865s

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script is for aligning the two DNA sequences"""

__appname__ = '[ALIGN SEQS]'
__author__ = 'Chalita Chomkatekaew chalita.chomkatekaew20@imperial.ac.uk'
__version__ = '0.0.1'

## import

import sys
import csv

# Two example sequences to match
#seq2 = "ATCGCCGGATTACGGG"
#seq1 = "CAATTCGGAT"

## import the input sequences from a csv file
print("Aligning the DNA sequences....")

x = "../data/Exampleseq.csv" #read in the default sequences
temp = [] # Create an empty space for the sequence to be stored in
with open(x, "r") as seq:
    csvseq = csv.reader(seq)
    for row in csvseq:
        temp.append(row[1])


#Define the sequence seq1 and seq2 for the following analyses

print()
print("This is a first input sequence: %s \n This is a second input sequence: %s" % (temp[0], temp[1]) )
print()

seq1 = temp[0]
seq2 = temp[1]

## function
# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint): # it will run with the startpoint of 0 if not specify
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"
    # some formatted output
    print("." * startpoint + matched) # "." * startpoint means how many time "*" is repeated based on the number of startpoint          
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest

l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

    # now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1
    
for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2 # Print position of the short sequence in corresponding to longer sequence when at the best alignment score
        my_best_score = z 
print(my_best_align)
print(s1)
print("Best score:", my_best_score)

# Export the output to a file "best_align_seq_result.txt"
output = open("../results/best_align_seq_result.txt", "w")
output.write("The best alignment" + "\n" + my_best_align + "\n" + s1 + "\n" + "Best score:" + my_best_score)
output.close()


def main(argv):
    print("Done!")
    return None

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)


**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 91.5

Output (only first 500 characters): 


**********************************************************************
Aligning the DNA sequences....

This is a first input sequence: CAATTCGGAT 
 This is a second input sequence: ATCGCCGGATTACGGG

-----*****
CAATTCGGAT
ATCGCCGGATTACGGG
5
 
.------*--*
.CAATTCGGAT
ATCGCCGGATTACGGG
2
 
..*---------
..CAATTCGGAT
ATCGCCGGATTACGGG
1
 
...--------*-
...CAATTCGGAT
ATCGCCGGATTACGGG
1
 
....*---------
....CAATTCGGAT
ATCGCCGGATTACGGG
1
 
.....*---*-----
.....CAATTCGGAT
ATCGCCGGATTACGGG
2
 
......--***--*--
......CAATTCGGAT
ATCGCCGGATTACGGG
4
 
.......-*-*-***-
.......CAATTC
**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "align_seqs.py", line 88, in <module>
    output.write("The best alignment" + "\n" + my_best_align + "\n" + s1 + "\n" + "Best score:" + my_best_score)
TypeError: can only concatenate str (not "int") to str

======================================================================
Inspecting script file using_name.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script illustrates how 'main' and 'name' work"""

__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk)'
__version__ = '0.0.1'

# Filename: using_name.py

if __name__ == '__main__' :
    print('This program is being run by itself')
else:
    print('I am being imported from another module')

print("This module's name is: " + __name__)

**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 91.5

Output (only first 500 characters): 


**********************************************************************
This program is being run by itself
This module's name is: __main__

**********************************************************************

Code ran without errors

Time consumed = 0.08153s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script is a third exercise to swap keys and values
in a dictionary"""
__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk'
__version__ = '0.0.1'

## Constants ##

taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a short python script to populate a dictionary called taxa_dic 
# derived from  taxa so that it maps order names to sets of taxa.
# 
# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc.
#  OR,
# 'Chiroptera': {'Myotis lucifugus'} ... etc

##Solution

taxa_dic = {} #creat an empty dictionary for the output

for x, y in taxa:
        if  y in taxa_dic: #If y is already an a key in the taxa_dic
                taxa_dic[y].append(x) #then append x as a value
        else:
                taxa_dic[y] = [x] #otherwise y has x as an only value

#Printing new dictionary
print(taxa_dic)
**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 91.5

Output (only first 500 characters): 


**********************************************************************
{'Chiroptera': ['Myotis lucifugus'], 'Rodentia': ['Gerbillus henleyi', 'Peromyscus crinitus', 'Mus domesticus', 'Cleithrionomys rutilus'], 'Afrosoricida': ['Microgale dobsoni', 'Microgale talazaci'], 'Carnivora': ['Lyacon pictus', 'Arctocephalus gazella', 'Canis lupus']}

**********************************************************************

Code ran without errors

Time consumed = 0.07820s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""

__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk)'
__version__ = '0.0.1'

##imports##
import sys # module to interface our program with the operating system
import doctest

## constants ##


## functions ##
def even_or_odd(x=0): #if not specificed, x should take value 0.

    """Find whether a number x is even or odd.
    
    >>> even_or_odd(10)
    '10 is Even!'

    >>> even_or_odd(5)
    '5 is Odd!'

    whenever a float is provided, then the closest integer is used:
    >>> even_or_odd(3.2)
    '3 is Odd!'

    in case of negative numbers, the positive is taken:
    >>> even_or_odd(-2)
    '-2 is Even!'

    """
    #Define function to be tested
    if x % 2 == 0: #The conditional if
        return "%d is Even!" % x
    return "%d is Odd!" % x

def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))

    return 0

if __name__ == "__main__":
    status = main(sys.argv)

doctest.testmod() # To run with embedded tests


**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 91.0

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!

**********************************************************************

Code ran without errors

Time consumed = 0.12124s

======================================================================
Inspecting script file sysargv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script illustrates how sys package works"""

__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk)'
__version__ = '0.0.1'

#Importing package
import sys


print("This is the name of the script: ", sys.argv[0]) # First index (0) is the name of the file name
print("Number of arguments: ", len(sys.argv)) # how many arguments were input
print("The arguments are: ", str(sys.argv)) # what are those arguments

**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 91.0

Output (only first 500 characters): 


**********************************************************************
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.07851s

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script prints the input data into output block by species"""

__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk)'
__version__ = '0.0.1'

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by species 
# 
# A nice example output is:
# 
# Latin name: Passerculus sandwichensis
# Common name: Savannah sparrow
# Mass: 18.7
# ... etc.

# Hints: use the "print" command! You can use list comprehensions!

def read_table():
    for name in birds:
        print("Latin name: ", name[0])
        print("Common name: ", name[1])
        print("Mass: ", name[2])
    return None

print(read_table())

test = [print("Latin name: %s \n Common name: %s \n Mass: %s" % (name[0], name[1], name[2]))for name in birds]

**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 90.5

Output (only first 500 characters): 


**********************************************************************
Latin name:  Passerculus sandwichensis
Common name:  Savannah sparrow
Mass:  18.7
Latin name:  Delichon urbica
Common name:  House martin
Mass:  19
Latin name:  Junco phaeonotus
Common name:  Yellow-eyed junco
Mass:  19.5
Latin name:  Junco hyemalis
Common name:  Dark-eyed junco
Mass:  19.6
Latin name:  Tachycineata bicolor
Common name:  Tree swallow
Mass:  20.2
None
Latin name: Passerculus sandwichensis 
 Common name: Savannah sparrow 
 Mass: 18.7
Latin name: Delichon urbica 
 Common name: House
**********************************************************************

Code ran without errors

Time consumed = 0.07918s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This is an example script explaining more about loops and conditionals combined"""

__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk)'
__version__ = '0.0.1'

########################
def hello_1(x):
    for j in range(x):
        if j % 3 == 0:
            print('hello')
    print(' ')

hello_1(12)

########################
def hello_2(x):
    for j in range(x):
        if j % 5 == 3:
            print('hello')
        elif j % 4 == 3:
            print('hello')
    print(' ')

hello_2(12)

########################
def hello_3(x, y):
    for i in range(x, y):
        print('hello')
    print(' ')

hello_3(3, 17)

########################
def hello_4(x):
    while x != 15:
        print('hello')
        x = x + 3 #while loop will stop when the condition is FALSE
    print(' ')

hello_4(0)

########################
def hello_5(x):
    while x < 100:
        if x == 31:
            for k in range(7):
                print('hello')
        elif x == 18:
            print('hello')
        x = x + 1 
    print(' ')

hello_5(12)

# WHILE loop with BREAK
def hello_6(x, y):
    while x: #while x is TRUE
        print("hello!" + str(y))
        y +=1 # increment y by 1
        if y == 6:
            break
    print(' ')

hello_6(True, 0)
**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 87.5

Output (only first 500 characters): 


**********************************************************************
hello
hello
hello
hello
 
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
 
hello!0
hello!1
hello!2
hello!3
hello!4
hello!5
 

**********************************************************************

Code ran without errors

Time consumed = 0.07873s

======================================================================
Inspecting script file basic_io1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This is a basic script file of an example on how to import
the data from a simple text file"""

__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk)'
__version__ = '0.0.1'

#############################
# FILE INPUT
#############################
# Open a file for reading
with open('../sandbox/test.txt', 'r') as f:
    # use "implicit" for loop:
    # if the object is a file, python will cycle over lines
    for line in f:
        print(line)

# Once you drop out of the with, the file is automatically closed

# Same example, skip blank lines
with open('../sandbox/test.txt', 'r') as f:
    for line in f:
        if len(line.strip()) > 0: ## checking if the line is empty
            print(line)


**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 87.5

Output (only first 500 characters): 


**********************************************************************
First Line

Second Line



Thrid Line



Fourth Line
First Line

Second Line

Thrid Line

Fourth Line

**********************************************************************

Code ran without errors

Time consumed = 0.07909s

======================================================================
Inspecting script file basic_io2.py...

File contents are:

**********************************************************************

#!/usr/bin/env python3

"""This script is showing the steps to write an file output"""

__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk)'
__version__ = '0.0.1'

#######################
# FILE OUTPUT
#######################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ##Add a new line at the end

f.close()

**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 87.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.07556s

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Description of this program or application.
You can use several lines"""

__appname__ = '[application name here]'
__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

##imports##
import sys # module to interface our program with the operating system

## constants ##


## functions ##
def main(argv):
    """ Main entry point ofthe program """
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__":
    """Makes sure the "main" function is called from command line"""
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 87.5

Output (only first 500 characters): 


**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.07699s

======================================================================
Inspecting script file MyExampleScript.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script is the first example of writing function and python script"""

__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk)'
__version__ = '0.0.1'

def foo(x):
    x *= x # same as x = x*x
    print(x)

foo(2)

**********************************************************************

Testing MyExampleScript.py...

MyExampleScript.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 87.0

Output (only first 500 characters): 


**********************************************************************
4

**********************************************************************

Code ran without errors

Time consumed = 0.07854s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script is the first exercise using the list comprehension to generate
three different lists of birds, which consists of latin names,
common names, and body mass."""

__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk'
__version__ = '0.0.1'

## Constants ##

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 

# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.

## First exercise
# Creating three different lists of birds using list comprehension

#List of the latin names
Latin_names = [row[0] for row in birds]
print(Latin_names)

#List of the common names
Common_names = [row[1] for row in birds]
print(Common_names)

#List of the body mass
Body_mass = [row[2] for row in birds]
print(Body_mass)

## Second exercise
# Creating three different lists of birds using a convensional loop

#List of the latin names
Latin_names = []
for row in birds:
    Latin_names.append(row[0])
print(Latin_names)

#List of the common names
Common_names = []
for row in birds:
    Common_names.append(row[1])
print(Common_names)

#List of the body mass
Body_mass = []
for row in birds:
    Body_mass.append(row[2])
print(Body_mass)




 

**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 87.0

Output (only first 500 characters): 


**********************************************************************
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]

**********************************************************************

Code ran without errors

Time consumed = 0.07803s

======================================================================
Inspecting script file basic_csv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This is a basic script when handling with CSV file input in python"""

__author__ = 'Chalita Chomkatekaew (chalita.chomkatekaew20@imperial.ac.uk)'
__version__ = '0.0.1'


import csv

# Read a file containing:
# 'Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)'
with open('../data/testcsv.csv', 'r') as f:

    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print("This species is", row[0])

# write a file containing only species name and Body mass
with open('../data/testcsv.csv', 'r') as f:
    with open('../data/bodymass.csv', 'w') as g:

        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0], row[4]])

**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 87.0

Output (only first 500 characters): 


**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
This species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
This species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
This species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
This species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Mada
**********************************************************************

Code ran without errors

Time consumed = 0.08426s

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 87.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!