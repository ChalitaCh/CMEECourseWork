Starting code feedback for Chalita, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 2.21 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week1, Week7, Week2, MiniProject2, .git, Miniproject, Week3, Feedback

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
#The files with following extension will not be push into the git repository

*~ 
*.tmp

#MAC weird system file
.DS_Store

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# My CMEE Coursework Repository 2021-2022

This repository contains the coursework for my MSc CMEE at Imperial College London.

## Author

[Chalita Chomkatekaew](https://orcid.org/0000-0003-2543-1045/) 

## Week 1

Introduction to the UNIX and Linux, shell scripting and LaTeX. Code folder contains the shell utility scripts, where the data contains the example data files.

## Week2

Introduction to the basic Python syntax and data structure. How to write and run Python script, together with the control flow tools and debugging the Python script.
 
## Week 3

Introduction to the R, statistical software. This week, we explored the basic R syntax, Priciples of data wrangling and exploration. Generate publication quality figures, Data visualisation as well as how to find and fix errors in R code using debugging.

## Week 7

This week, we will look at how Python programming can be used in numerical computing, using numpu and scipy packages. The workflow for more reproducible and automated data analyses across R and Python using subprocess module, followed by the introduction into Jupyter notebook.

## MiniProject

This directory is for MiniProject assignment submission for model fitting of bacterial growth curve. The project uses combination of R, Python, Bash, and LaTex programming languages. Please note that Miniproject 2 is just a copy. Please ignore.



**********************************************************************

======================================================================
Looking for the weekly directories...

Found 4 weekly directories: Week1, Week2, Week3, Week7

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: code, data, results

Found the following files: .gitignore, README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# Week7 CMEE Coursework 

CMEE Bootcamp Week 7 (15 Nov 2021 - 19 Nov 2021)
The topics covered in this week including:

- Introduction to the numerical computing in Python using numpy and scipy packages
- Profiling in Python, to maximise the computational speed
- Building the workflow for reproducible and automated data analyses using Python by subprocess packages
- Introduction to the Jupyter notebook, set-up and the basic untility

All the scripts used Mac OS Big Sur version 11.6. A comprehensive list of all files and scripts within the Week 2 directory is provided below.

## Code

- LV1.py - An example of numerical integration to solve the Lotka-Volterra model, and data visualisation.
- MyFirstJupyterNb.ipynb
- TestR.R - test R script file
- TestR.py - An example script on how subprocess works
- oaks_debugme.py - Missing oaks practical
- profileme.py - Illustration on how profiling in python works
- profileme2.py - Comparison of alternative approaches and the impact on computational speed
- timetime.py - A quick profiling with timeit module

## Data

- TestOaksData.csv - for missing oaks practical

## Results

An empty directory for the output files


 

**********************************************************************

Results directory is empty - good! 

Found 8 code files: TestR.py, profileme.py, oaks_debugme.py, MyFirstJupyterNb.ipynb, profileme2.py, TestR.R, LV1.py, timetime.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file TestR.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
This is an example script for creating a workflow with other scripts using python,
subprocess package. In this script, TestR.R is called and the output and the error files are saved accordingly.
"""

__author__ = 'Chalita Chomkatekaew chalita.chomkatekaew20@ic.ac.uk'
__version__ = '0.0.1'


import subprocess

subprocess.Popen("Rscript --verbose TestR.R > ../results/TestR.Rout 2> ../results/TestR_errFile.Rout", shell = True).wait()
**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.11454s

======================================================================
Inspecting script file profileme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
This script is to illustrate the profiling in Python by comparing
two methods in joining/appending the strings. The code to profile the script is
run -p the_name_of_script.py
"""

__author__ = 'Chalita Chomkatekaew chalita.chomkatekaew20@ic.ac.uk'
__version__ = '0.0.1'

def my_squares(iters):
    out = []
    for i in range(iters):
        out.append(i ** 2)
    return out

def my_join(iters,string):
    out = ''
    for i in range(iters):
        out += string.join(", ")
    return out

def run_my_func(x, y):
    print(x, y)
    my_squares(x)
    my_join(x, y)
    return 0

run_my_func(10000000, "My string")
**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 5.23726s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
This script is for a debugging practical. The debug
is done by using a doctest as illustrated below
"""

__author__ = 'Chalita Chomkatekaew chalita.chomkatekaew20@ic.ac.uk'
__version__ = '0.0.1'

## Imports ##

import csv
import sys
import doctest
import re


#Define function
def is_an_oak(name):
    """Returns True if name is starts with 'quercus'

    >>> is_an_oak('Fagus sylvatica')
    False

    >>> is_an_oak('Quercuss robur')
    False

    >>> is_an_oak('Quercus robur')
    True
    """
    return True if re.search(r'\bquercus\b', name, re.IGNORECASE ) else False #Checking if the matched not a typo

## Main function ##

def main(argv): 
    """
    The main function will open the datafile as f and write a result to JustOaksData.csv,
    which is given as g variable. The species name which match the name - quercus will be stored
    and write into g
    """
    f = open('../data/TestOaksData.csv','r') 
    g = open('../data/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)

    #oaks = set() #not use...removed
    
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0],row[1]])
    f.close() #close the file opened
    g.close()    

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod() #To run with the test


**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
['Genus', ' species']
The genus is: 
Genus

['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.05094s

======================================================================
Inspecting script file MyFirstJupyterNb.ipynb...

File contents are:

**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8ba99ef0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is python!\n"
     ]
    }
   ],
   "source": [
    "a = \"this is python!\" ; print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "74ca238a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is R!"
     ]
    }
   ],
   "source": [
    "a <- \"this is R!\"; cat(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6517c7cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-3-8539b7e7bb05>:4: DeprecationWarning: scipy.arange is deprecated and will be removed in SciPy 2.0.0, use numpy.arange instead\n",
      "  x = sc.arange(0, 5, 0.1); y= sc.sin(x)\n",
      "<ipython-input-3-8539b7e7bb05>:4: DeprecationWarning: scipy.sin is deprecated and will be removed in SciPy 2.0.0, use numpy.sin instead\n",
      "  x = sc.arange(0, 5, 0.1); y= sc.sin(x)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as p\n",
    "import scipy as sc\n",
    "\n",
    "x = sc.arange(0, 5, 0.1); y= sc.sin(x)\n",
    "p.plot(x, y); p.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5e589831",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading required package: ggplot2\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\ngg==",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 150,
       "width": 198
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "require(ggplot2)\n",
    "library(repr)\n",
    "options(repr.plot.width=3.3, repr.plot.height=2.5)\n",
    "\n",
    "x <- seq(0, 5, 0.1); y <- sin(x)\n",
    "qplot(x ,y, geom = \"line\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db3228ef",
   "metadata": {},
   "source": [
    "To display the LaTex code, it needs to be in IPython notebook inside the html/markdown section of the notebook!!!\n",
    "\n",
    "$$\n",
    "    \\frac{dN}{dt} = rN \\left(1-\\frac{N}{K}\\right)\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5fb2ac5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

**********************************************************************

Testing MyFirstJupyterNb.ipynb...

======================================================================
Inspecting script file profileme2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
This is another example script for profiling in Python by comparing
two methods in joining/appending the strings. This script uses the list
comprension and for loop to compare the run time.
The code to profile the script is run -p the_name_of_script.py
"""

__author__ = 'Chalita Chomkatekaew chalita.chomkatekaew20@ic.ac.uk'
__version__ = '0.0.1'

def my_squares(iters):
    out = [i ** 2 for i in range(iters)]
    return out

def my_join(iters,string):
    out = ''
    for i in range(iters):
        out += ", " + string
    return out

def run_my_func(x, y):
    print(x, y)
    my_squares(x)
    my_join(x, y)
    return 0

run_my_func(10000000, "My string")
**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 97.0

Output (only first 500 characters): 


**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 3.07914s

======================================================================
Inspecting script file TestR.R...

File contents are:

**********************************************************************
#This is an example R file to use testing the workflow in Python

print("Hello, This is R!")
**********************************************************************

Testing TestR.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Hello, This is R!"

**********************************************************************

Code ran without errors

Time consumed = 0.05411s

======================================================================
Inspecting script file LV1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script illustrates the numerical integration using Python language. 
The Lotka-Volterra model, a predator-prey system, is used as an example in this script"""

__appname__ = 'LV model'
__author__ = 'Chalita Chomkatekaew chalita.chomkatekaew20@ic.ac.uk'
__version__ = '0.0.1'


#Import the package(s)

import scipy as sc
import scipy.integrate as integrate
import numpy as np
import matplotlib.pylab as p
import sys

"""
The Lotka-Volterra model

A predator-prey system in two-dimensional space (e.g on land)

Equation

dR/dt = rR - aCR 
dC/dt = -zC + eaCR

- C and R are consumer (e.g. predator) and resource (e.g. prey) population
abundances (either number x area-1)

- r in the intrinsic (per-capita) growth rate (time-1)

- a is per-capita "search rate" for the resource (area x time-1)

- z is mortality rate (time-1) and e is the consumer's efficiency in converting
resource to consumer biomass
"""

#Defined function

def dCR_dt(pops, t=0):
    
    R = pops[0] #call the first element of pops as R
    C = pops[1] #call the second element of pops as C
    dRdt = r * R - a * R *C
    dCdt = - z * C + e * a * R * C

    return np.array([dRdt, dCdt])

#Assign the parameter values

r = 1.
a = 0.1
z = 1.5
e = 0.75

t = np.linspace(0, 15, 1000) #sub-divisions of time to 1000 points

def main(argv):

    #Set the initial conditions for the two populations

    R0 = 10 #10 resourcest
    C0 = 5 #5 consumers
    RC0 = np.array([R0, C0])

    #Numerically integrate this system with starting conditions

    print("Analysing the prey-predator system using The Lotka-Volterra model....")
    print("The intrinsic growth rate (r) is : ", r, "time-1")
    print("The search rate for resource (a) is : ", a, "area x time-1")
    print("The mortality (z) is : ", z, "time-1")
    print("The onsumer's efficiency in converting resource to consumer biomass (e) is: ", e)

    pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output= True)

    #Plot and visualising the results

    #open an empty figure object

    print("Plotting the Consumer-Resource population dynamics over time...")

    f1 = p.figure()

    p.plot(t, pops[:, 0], 'g-', label = 'Resource density') #plot t vs pops resources (first column) in green
    p.plot(t, pops[:,1], 'b-', label = 'Consumer density') #plot t vs pops Consumers (second column)
    p.grid() #use a grid as a theme
    p.legend(loc = 'best')
    p.xlabel('Time')
    p.ylabel('Population density')
    p.title('Consumer-Resource population dynamics')

    f1.savefig('../results/LV_model1.pdf') #Save figures

    #open another empty figure object

    print("Plotting the Consumer-Resource population dynamics...")

    f2 = p.figure()
    p.plot(pops[:, 0], pops[:, 1], 'r-')
    p.grid()
    p.xlabel('Resource density')
    p.ylabel('Consumer density')
    p.title('Consumer-Resource population dynamics')

    f2.savefig('../results/LV_model1_1.pdf')

    print("Done!!")

    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 96.5

Output (only first 500 characters): 


**********************************************************************
Analysing the prey-predator system using The Lotka-Volterra model....
The intrinsic growth rate (r) is :  1.0 time-1
The search rate for resource (a) is :  0.1 area x time-1
The mortality (z) is :  1.5 time-1
The onsumer's efficiency in converting resource to consumer biomass (e) is:  0.75
Plotting the Consumer-Resource population dynamics over time...
Plotting the Consumer-Resource population dynamics...
Done!!

**********************************************************************

Code ran without errors

Time consumed = 0.76664s

======================================================================
Inspecting script file timetime.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""
This script is to illustrate the profiling in Python by comparing
the two scripts profileme.py vs profileme2.py using timeit package
"""

__author__ = 'Chalita Chomkatekaew chalita.chomkatekaew20@ic.ac.uk'
__version__ = '0.0.1'


##############################################################################
# loops vs. list comprehensions: which is faster?
##############################################################################

iters = 100000

import timeit

from profileme import my_squares as my_squares_loops

from profileme2 import my_squares as my_squares_lc

##############################################################################
# loops vs. the join method for strings: which is faster?
##############################################################################

mystring = "my string"

from profileme import my_join as my_join_join

from profileme2 import my_join as my_join

#%timeit my_squares_loops(iters)
#%timeit my_squares_lc(iters)
#%timeit (my_join_join(iters, mystring))
#%timeit (my_join(iters, mystring))

"""
To use the timeit command, the command needs to be called in the ipython terminal as
shown above. Calling it within the script would not work.

For more simpler approach, please use the following the commands from time package.
This can be run as a whole script.

import time
start = time.time()
my_squares_loops(iters)
print("my_squares_loops takes %f s to run." % (time.time() - start))

start = time.time()
my_squares_lc(iters)
print("my_squares_lc takes %f s to run." % (time.time() - start))

"""



**********************************************************************

Testing timetime.py...

timetime.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 94.5

Output (only first 500 characters): 


**********************************************************************
10000000 My string
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 8.20347s

======================================================================
======================================================================
Finished running scripts

Ran into 0 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 94.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!